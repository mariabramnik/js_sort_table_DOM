{"version":3,"sources":["scripts/main.js"],"names":["thNodes","document","querySelectorAll","tab","querySelector","rows","rowsArr","Array","from","slice","length","SortColumn","columnNumber","number","sort","rowA","rowB","cellA","cells","innerHTML","cellB","cellAOhneComma","replace","cellBOhneComma","firstNum","parseFloat","secondNum","forEach","newRow","appendChild","element","closest","addEventListener","e","cell","target","strNew","cellIndex","res","isNaN"],"mappings":";AAAA,aAEA,IAAMA,EAAUC,SAASC,iBAAiB,MACpCC,EAAMF,SAASG,cAAc,SAC7BC,EAAOF,EAAID,iBAAiB,MAC5BI,EAAUC,MAAMC,KAAKH,GAAMI,MAAM,EAAGJ,EAAKK,OAAS,GAoBxD,SAASC,EAAWC,EAAcC,GAChCP,EAAQQ,KAAK,SAASC,EAAMC,GACpBC,IAAAA,EAAQF,EAAKG,MAAMN,GAAcO,UACjCC,EAAQJ,EAAKE,MAAMN,GAAcO,UAEnCN,IAAW,IAAXA,EACMI,OAAAA,EAAQG,EAAS,EAAKH,EAAQG,GAAU,EAAI,EAE9CC,IAAAA,EAAiBJ,EAAMK,QAAQ,OAAQ,IAAIA,QAAQ,IAAK,KACxDC,EAAiBH,EAAME,QAAQ,OAAQ,IAAIA,QAAQ,IAAK,KACxDE,EAAWC,WAAWJ,GACtBK,EAAYD,WAAWF,GAErBC,OAAAA,EAAWE,EAAa,EAAKF,EAAWE,GAAc,EAAI,IAItEpB,EAAQqB,QAAQ,SAASC,GACvBzB,EAAI0B,YAAYD,KApCpB5B,EAAQ2B,QAAQ,SAAAG,GACVA,EAAQC,QAAQ,UAClBD,EAAQE,iBAAiB,QAAS,SAAAC,GAC1BC,IAAAA,EAAOD,EAAEE,OAETC,EADQjC,EAAIE,KAAK,GAAGa,MAAMgB,EAAKG,WAAYlB,UAC9BG,QAAQ,OAAQ,IAAIA,QAAQ,IAAK,KAC9CgB,EAAMb,WAAWW,GACnBvB,GAAS,EAET0B,MAAMD,KACRzB,GAAS,GAGXF,EAAWuB,EAAKG,UAAWxB","file":"main.47c21915.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst thNodes = document.querySelectorAll('th');\r\nconst tab = document.querySelector('table');\r\nconst rows = tab.querySelectorAll('tr');\r\nconst rowsArr = Array.from(rows).slice(1, rows.length - 1);\r\n\r\nthNodes.forEach(element => {\r\n  if (element.closest('thead')) {\r\n    element.addEventListener('click', e => {\r\n      const cell = e.target;\r\n      const str = ((tab.rows[1].cells[cell.cellIndex]).innerHTML);\r\n      const strNew = str.replace(/[$]/g, '').replace(',', '.');\r\n      const res = parseFloat(strNew);\r\n      let number = true;\r\n\r\n      if (isNaN(res)) {\r\n        number = false;\r\n      }\r\n\r\n      SortColumn(cell.cellIndex, number);\r\n    });\r\n  }\r\n});\r\n\r\nfunction SortColumn(columnNumber, number) {\r\n  rowsArr.sort(function(rowA, rowB) {\r\n    const cellA = rowA.cells[columnNumber].innerHTML;\r\n    const cellB = rowB.cells[columnNumber].innerHTML;\r\n\r\n    if (number === false) {\r\n      return (cellA > cellB) ? 1 : (cellA < cellB) ? -1 : 0;\r\n    } else {\r\n      const cellAOhneComma = cellA.replace(/[$]/g, '').replace(',', '.');\r\n      const cellBOhneComma = cellB.replace(/[$]/g, '').replace(',', '.');\r\n      const firstNum = parseFloat(cellAOhneComma);\r\n      const secondNum = parseFloat(cellBOhneComma);\r\n\r\n      return (firstNum > secondNum) ? 1 : (firstNum < secondNum) ? -1 : 0;\r\n    }\r\n  });\r\n\r\n  rowsArr.forEach(function(newRow) {\r\n    tab.appendChild(newRow);\r\n  });\r\n};\r\n"]}